// left right root

// Approach 1 -> Recursive approach 

class Solution {
public:
    void postorder(TreeNode* root, vector<int> &ans)
    {
        if(root==NULL)
        {
            return;
        }
        postorder(root->left, ans);
        postorder(root->right, ans);
        ans.push_back(root->val);
    }

    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        postorder(root, ans);
        return ans;
    }
};

// Approach 2 -> Iterative way -> using 2 stacks

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if(root==NULL) return ans;
        stack<TreeNode*> st1, st2;
        st1.push(root);
        while(!st1.empty())
        {
            auto it=st1.top();
            st1.pop();
            st2.push(it);
            if(it->left) st1.push(it->left);
            if(it->right) st1.push(it->right);
        }
        while(!st2.empty())
        {
            ans.push_back(st2.top()->val);
            st2.pop();
        }
        return ans;
    }
};

// Approach 3 -> Iterative way -> 1 stack

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> postorder;
        if(root==NULL) return postorder;
        TreeNode* cur=root;
        stack<TreeNode*> st;
        while(cur!=NULL || !st.empty())
        {
            if(cur!=NULL)
            {
                st.push(cur);
                cur=cur->left;
            }
            else{
                auto temp=st.top()->right;
                if(temp==NULL)
                {
                    temp=st.top();
                    st.pop();
                    postorder.push_back(temp->val);
                    while(!st.empty() && temp==st.top()->right)
                    {
                        temp=st.top();
                        st.pop();
                        postorder.push_back(temp->val);
                    }
                }
                else{
                    cur=temp;
                }
            }
        }
        return postorder;
    }
};
